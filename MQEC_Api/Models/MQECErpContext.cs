// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace MQEC_Api.Models
{
    public partial class MQECErpContext : DbContext
    {
        public MQECErpContext()
        {
        }

        public MQECErpContext(DbContextOptions<MQECErpContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ComCurrency> ComCurrency { get; set; }
        public virtual DbSet<ComDepartment> ComDepartment { get; set; }
        public virtual DbSet<ComFormType> ComFormType { get; set; }
        public virtual DbSet<ComInvoiceType> ComInvoiceType { get; set; }
        public virtual DbSet<ComRank> ComRank { get; set; }
        public virtual DbSet<ComTaxType> ComTaxType { get; set; }
        public virtual DbSet<ComTurnkeySetting> ComTurnkeySetting { get; set; }
        public virtual DbSet<ComVatType> ComVatType { get; set; }
        public virtual DbSet<CompanyInfo> CompanyInfo { get; set; }
        public virtual DbSet<CompanyInfoReceipt> CompanyInfoReceipt { get; set; }
        public virtual DbSet<DiscountsUploadStatus> DiscountsUploadStatus { get; set; }
        public virtual DbSet<Fm> Fm { get; set; }
        public virtual DbSet<Invoice> Invoice { get; set; }
        public virtual DbSet<InvoiceDetails> InvoiceDetails { get; set; }
        public virtual DbSet<InvoiceNumber> InvoiceNumber { get; set; }
        public virtual DbSet<InvoiceNumberDetails> InvoiceNumberDetails { get; set; }
        public virtual DbSet<InvoiceUploadStatus> InvoiceUploadStatus { get; set; }
        public virtual DbSet<Programs> Programs { get; set; }
        public virtual DbSet<UserPrograms> UserPrograms { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ComCurrency>(entity =>
            {
                entity.Property(e => e.CurrencyId).IsUnicode(false);
            });

            modelBuilder.Entity<ComDepartment>(entity =>
            {
                entity.Property(e => e.DeptNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.DeptFather)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.DeptManager).HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.DeptName).HasDefaultValueSql("(space((0)))");
            });

            modelBuilder.Entity<ComFormType>(entity =>
            {
                entity.HasKey(e => new { e.FormNo, e.TypeNo })
                    .HasName("PK_comOrderType");

                entity.Property(e => e.FormNo).IsUnicode(false);

                entity.Property(e => e.TypeNo).IsUnicode(false);
            });

            modelBuilder.Entity<ComInvoiceType>(entity =>
            {
                entity.Property(e => e.InvoiceType).IsUnicode(false);
            });

            modelBuilder.Entity<ComRank>(entity =>
            {
                entity.Property(e => e.RankNo).ValueGeneratedNever();
            });

            modelBuilder.Entity<ComTaxType>(entity =>
            {
                entity.Property(e => e.TaxTypeNo).IsUnicode(false);

                entity.Property(e => e.VatType).IsUnicode(false);
            });

            modelBuilder.Entity<ComVatType>(entity =>
            {
                entity.Property(e => e.VatTypeNo).IsUnicode(false);
            });

            modelBuilder.Entity<CompanyInfo>(entity =>
            {
                entity.Property(e => e.CompanyNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.CompanyAddress).HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.CompanyEngName).HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.CompanyFullName).HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.CompanyName).HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.Fax)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.Principal).HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.TaxId)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.Telephone)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");
            });

            modelBuilder.Entity<CompanyInfoReceipt>(entity =>
            {
                entity.HasKey(e => new { e.CompanyNo, e.ReceiptName });

                entity.Property(e => e.CompanyNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.ReceiptName).HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.CompanyName).HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.ContactFax)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.ContactPerson).HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.ContactTelephone)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.LocationNo).IsUnicode(false);

                entity.Property(e => e.Memo).HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.ReceiptAddress).HasDefaultValueSql("(space((0)))");
            });

            modelBuilder.Entity<DiscountsUploadStatus>(entity =>
            {
                entity.HasKey(e => new { e.CompanyNo, e.TaxId, e.InvoiceCategory, e.InvoiceKind, e.DisNo });

                entity.Property(e => e.CompanyNo).IsUnicode(false);

                entity.Property(e => e.TaxId).IsUnicode(false);

                entity.Property(e => e.InvoiceCategory).IsUnicode(false);

                entity.Property(e => e.InvoiceKind).IsUnicode(false);

                entity.Property(e => e.DisNo).IsUnicode(false);
            });

            modelBuilder.Entity<Fm>(entity =>
            {
                entity.Property(e => e.UserId)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.DeptNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.EncryptPw)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.SigningClass)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.SystemLanguage)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.UseCategory)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserClass)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.UserEmail)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.UserEngName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.UserName).HasDefaultValueSql("(space((0)))");
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.HasKey(e => new { e.CompanyNo, e.TaxId, e.InvoiceType, e.InvoiceCategory, e.InvoiceKind, e.InvoiceNumber });

                entity.Property(e => e.CompanyNo).IsUnicode(false);

                entity.Property(e => e.TaxId).IsUnicode(false);

                entity.Property(e => e.InvoiceType).IsUnicode(false);

                entity.Property(e => e.InvoiceCategory).IsUnicode(false);

                entity.Property(e => e.InvoiceKind).IsUnicode(false);

                entity.Property(e => e.InvoiceNumber).IsUnicode(false);

                entity.Property(e => e.BuyerCustomerNumber).IsUnicode(false);

                entity.Property(e => e.BuyerEmailAddress).IsUnicode(false);

                entity.Property(e => e.BuyerFacsimileNumber).IsUnicode(false);

                entity.Property(e => e.BuyerId).IsUnicode(false);

                entity.Property(e => e.BuyerRemark).IsUnicode(false);

                entity.Property(e => e.BuyerRoleRemark).IsUnicode(false);

                entity.Property(e => e.BuyerTelephoneNumber).IsUnicode(false);

                entity.Property(e => e.CarrierId1).IsUnicode(false);

                entity.Property(e => e.CarrierId2).IsUnicode(false);

                entity.Property(e => e.CarrierType).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.CheckNumber).IsUnicode(false);

                entity.Property(e => e.Currency).IsUnicode(false);

                entity.Property(e => e.CustomsClearanceMark).IsUnicode(false);

                entity.Property(e => e.GroupMark).IsUnicode(false);

                entity.Property(e => e.Npoban).IsUnicode(false);

                entity.Property(e => e.RandomNumber).IsUnicode(false);

                entity.Property(e => e.RelateNumber).IsUnicode(false);

                entity.Property(e => e.SellerCustomerNumber).IsUnicode(false);

                entity.Property(e => e.SellerEmailAddress).IsUnicode(false);

                entity.Property(e => e.SellerFacsimileNumber).IsUnicode(false);

                entity.Property(e => e.SellerId).IsUnicode(false);

                entity.Property(e => e.SellerRoleRemark).IsUnicode(false);

                entity.Property(e => e.SellerTelephoneNumber).IsUnicode(false);

                entity.Property(e => e.TaxType).IsUnicode(false);
            });

            modelBuilder.Entity<InvoiceDetails>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceNumber, e.Serno })
                    .HasName("PK_InvoiceCustomerDetails");

                entity.Property(e => e.InvoiceNumber).IsUnicode(false);

                entity.Property(e => e.Prodid).IsUnicode(false);

                entity.Property(e => e.RelateNumber).IsUnicode(false);

                entity.Property(e => e.SourceNo).IsUnicode(false);

                entity.Property(e => e.SourceTaxTypeNo).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);
            });

            modelBuilder.Entity<InvoiceNumber>(entity =>
            {
                entity.HasKey(e => new { e.CompanyNo, e.TaxId, e.InvNo, e.InvoiceType, e.InvoiceYear, e.InvoiceMonthFrom });

                entity.Property(e => e.CompanyNo).IsUnicode(false);

                entity.Property(e => e.TaxId).IsUnicode(false);

                entity.Property(e => e.InvNo).IsUnicode(false);

                entity.Property(e => e.InvoiceType).IsUnicode(false);

                entity.Property(e => e.InvoiceYear).IsUnicode(false);

                entity.Property(e => e.InvoiceMonthFrom).IsUnicode(false);

                entity.Property(e => e.ImportType).IsUnicode(false);

                entity.Property(e => e.InvoiceMonthTo).IsUnicode(false);

                entity.Property(e => e.InvoiceNumberFrom).IsUnicode(false);

                entity.Property(e => e.InvoiceNumberTo).IsUnicode(false);

                entity.Property(e => e.InvoiceTrack).IsUnicode(false);
            });

            modelBuilder.Entity<InvoiceNumberDetails>(entity =>
            {
                entity.HasKey(e => new { e.CompanyNo, e.TaxId, e.InvNo, e.InvoiceType, e.InvoiceYear, e.InvoiceMonthFrom, e.InvoiceMonthTo, e.Serno });

                entity.Property(e => e.CompanyNo).IsUnicode(false);

                entity.Property(e => e.TaxId).IsUnicode(false);

                entity.Property(e => e.InvNo).IsUnicode(false);

                entity.Property(e => e.InvoiceType).IsUnicode(false);

                entity.Property(e => e.InvoiceYear).IsUnicode(false);

                entity.Property(e => e.InvoiceMonthFrom).IsUnicode(false);

                entity.Property(e => e.InvoiceMonthTo).IsUnicode(false);

                entity.Property(e => e.BranchTaxId).IsUnicode(false);

                entity.Property(e => e.InvoiceFunction).IsUnicode(false);

                entity.Property(e => e.InvoiceNumberFrom).IsUnicode(false);

                entity.Property(e => e.InvoiceNumberLast).IsUnicode(false);

                entity.Property(e => e.InvoiceNumberTo).IsUnicode(false);

                entity.Property(e => e.InvoiceTrack).IsUnicode(false);
            });

            modelBuilder.Entity<InvoiceUploadStatus>(entity =>
            {
                entity.HasKey(e => new { e.CompanyNo, e.TaxId, e.InvoiceType, e.InvoiceCategory, e.InvoiceKind, e.InvoiceNumber });

                entity.Property(e => e.TaxId).IsUnicode(false);

                entity.Property(e => e.InvoiceType).IsUnicode(false);

                entity.Property(e => e.InvoiceCategory).IsUnicode(false);

                entity.Property(e => e.InvoiceKind).IsUnicode(false);

                entity.Property(e => e.InvoiceNumber).IsUnicode(false);
            });

            modelBuilder.Entity<Programs>(entity =>
            {
                entity.Property(e => e.FrmId).ValueGeneratedNever();

                entity.Property(e => e.FrmCid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.FrmCname).HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.FrmPath)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.FrmState)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.FrmType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");
            });

            modelBuilder.Entity<UserPrograms>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.ProgramId });

                entity.Property(e => e.UserId)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");

                entity.Property(e => e.ProgramId)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((0)))");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}